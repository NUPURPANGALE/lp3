class Queen: 
 
def   init (self, N): 
self.N = N 
self.board = [[0]*N for _ in range(N)] 
 
def disp_board(self): 
for row in self.board: 
print() 
for col in row: 
if col == 1: 
print(u"\U0001F451", end=' ') # Queen emoji 
else: 
print(u"\u274C", end=' ') # Cross mark emoji 
print(end='\n') 
 
def is_attack(self, i, j): 
for k in range(0, self.N): 
if self.board[i][k] == 1 or self.board[k][j] == 1: 
return True 
for k in range(0, self.N): 
for l in range(0, self.N): 
if (k + l == i + j) or (k - l == i - j): 
if self.board[k][l] == 1: 
return True 
return False 
 
def N_queen(self, n): 
if n == 0: 
return True 
 
for i in range(0, self.N): 
for j in range(0, self.N): 
if (not self.is_attack(i, j)) and (self.board[i][j] != 1): 
self.board[i][j] = 1 
if self.N_queen(n-1): 
return True 
self.board[i][j] = 0 

return False 
 
def queen_positions(self): 
positions = [] 
for i in range(self.N): 
for j in range(self.N): 
if self.board[i][j] == 1: 
positions.append((i, j)) 
return positions 
 
# Input number of queens 
N = int(input("Enter the number of queens: ")) 
Q = Queen(N) 
 
print('Initial State:') 
Q.disp_board() 
 
Q.N_queen(N) 
 
print('\nFinal State:') 
Q.disp_board() 
 
positions = Q.queen_positions() 
print('\nPositions of the queens:') 
for idx, pos in enumerate(positions): 
print(f"Queen {idx + 1}: Row {pos[0] + 1}, Column {pos[1] + 1}")
